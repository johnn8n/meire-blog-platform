/**
 * üîß Í∞êÏ†ï Î∂ÑÏÑù ÎÇ†Ïßú ÏàòÏ†ï: blog_postsÏùò created_date ÏÇ¨Ïö©
 */

const sqlite3 = require('sqlite3').verbose();
const path = require('path');

class SentimentDateFixer {
  constructor() {
    const dbPath = path.join(process.cwd(), 'database.db');
    this.db = new sqlite3.Database(dbPath);
    
    // Ï£ºÏöî Ï¢ÖÎ™©Í≥º ÌäπÏÑ± Ï†ïÏùò
    this.stockAnalysis = {
      '005930': {
        name: 'ÏÇºÏÑ±Ï†ÑÏûê',
        ÌÇ§ÏõåÎìú: ['ÏÇºÏÑ±Ï†ÑÏûê', 'ÏÇºÏÑ±', 'Samsung'],
        ÌäπÏÑ±: 'AI ÏàòÏöîÏôÄ Î©îÎ™®Î¶¨ ÏÇ¨Ïù¥ÌÅ¥Ïóê ÎØºÍ∞êÌïú Î∞òÎèÑÏ≤¥ ÎåÄÌëúÏ£º',
        Í∏çÏ†ïÏã†Ìò∏: ['Î©îÎ™®Î¶¨ Ìò∏Ìô©', 'AI ÏàòÏöî', 'Ïï†Ìîå Í≥ÑÏïΩ', 'Î∞òÎèÑÏ≤¥ ÌöåÎ≥µ'],
        Î∂ÄÏ†ïÏã†Ìò∏: ['Î©îÎ™®Î¶¨ Ïπ®Ï≤¥', 'Ï§ëÍµ≠ Í≤ΩÏüÅ', 'Ïï†Ìîå ÏùòÏ°¥ÎèÑ']
      },
      'TSLA': {
        name: 'ÌÖåÏä¨Îùº',
        ÌÇ§ÏõåÎìú: ['ÌÖåÏä¨Îùº', 'Tesla', 'ÏùºÎ°†Î®∏Ïä§ÌÅ¨'],
        ÌäπÏÑ±: 'Ï†ÑÍ∏∞Ï∞® ÌòÅÏã†Í≥º ÏûêÏú®Ï£ºÌñâ ÍøàÏùò ÏÉÅÏßï',
        Í∏çÏ†ïÏã†Ìò∏: ['Ï†ÑÍ∏∞Ï∞® ÏàòÏöî', 'ÏûêÏú®Ï£ºÌñâ Î∞úÏ†Ñ', 'Ï§ëÍµ≠ ÏÑ±Í≥µ'],
        Î∂ÄÏ†ïÏã†Ìò∏: ['Ï§ëÍµ≠ Í≤ΩÏüÅ', 'Í∞ÄÍ≤© Ï†ÑÏüÅ', 'ÏûêÏú®Ï£ºÌñâ ÏßÄÏó∞']
      },
      'NVDA': {
        name: 'ÏóîÎπÑÎîîÏïÑ',
        ÌÇ§ÏõåÎìú: ['ÏóîÎπÑÎîîÏïÑ', 'NVIDIA'],
        ÌäπÏÑ±: 'AI ÌòÅÎ™ÖÏùò ÌïµÏã¨ ÏàòÌòúÏ£º, GPU Ï†àÎåÄÍ∞ïÏûê',
        Í∏çÏ†ïÏã†Ìò∏: ['AI Î∂ê', 'Îç∞Ïù¥ÌÑ∞ÏÑºÌÑ∞ ÏàòÏöî', 'ChatGPT Ïó¥Ìíç'],
        Î∂ÄÏ†ïÏã†Ìò∏: ['Ï§ëÍµ≠ Ï†úÏû¨', 'AI Î≤ÑÎ∏î', 'Í≤ΩÏüÅ Ïã¨Ìôî']
      },
      'AAPL': {
        name: 'Ïï†Ìîå',
        ÌÇ§ÏõåÎìú: ['Ïï†Ìîå', 'Apple', 'ÏïÑÏù¥Ìè∞'],
        ÌäπÏÑ±: 'ÌòÅÏã†Í≥º ÌîÑÎ¶¨ÎØ∏ÏóÑÏùò ÎåÄÎ™ÖÏÇ¨',
        Í∏çÏ†ïÏã†Ìò∏: ['ÏïÑÏù¥Ìè∞ Ïã†Ï†úÌíà', 'AI Í∏∞Îä•', 'ÏÑúÎπÑÏä§ ÏÑ±Ïû•'],
        Î∂ÄÏ†ïÏã†Ìò∏: ['Ï§ëÍµ≠ ÌåêÎß§ Î∂ÄÏßÑ', 'ÌòÅÏã† ÌïúÍ≥Ñ']
      },
      '267250': {
        name: 'HDÌòÑÎåÄ',
        ÌÇ§ÏõåÎìú: ['HDÌòÑÎåÄ', 'ÌòÑÎåÄÏ§ëÍ≥µÏóÖ', 'ÌòÑÎåÄ'],
        ÌäπÏÑ±: 'Ï°∞ÏÑ†ÏóÖÍ≥Ñ ÎåÄÌëú, ÏπúÌôòÍ≤Ω ÏÑ†Î∞ïÏùò ÎØ∏Îûò',
        Í∏çÏ†ïÏã†Ìò∏: ['ÏπúÌôòÍ≤Ω ÏÑ†Î∞ï', 'Ìï¥ÏÉÅÌíçÎ†•', 'Ï†ïÎ∂Ä ÏßÄÏõê'],
        Î∂ÄÏ†ïÏã†Ìò∏: ['Ï§ëÍµ≠ Ï°∞ÏÑ† Í≤ΩÏüÅ', 'ÏõêÏûêÏû¨ Í∞ÄÍ≤©']
      },
      'LLY': {
        name: 'ÏùºÎùºÏù¥Î¶¥Î¶¨',
        ÌÇ§ÏõåÎìú: ['ÏùºÎùºÏù¥Î¶¥Î¶¨', 'Eli Lilly', 'Î¶¥Î¶¨'],
        ÌäπÏÑ±: 'ÎãπÎá®¬∑ÎπÑÎßå ÏπòÎ£åÏ†úÏùò ÌòÅÏã† ÏÑ†ÎèÑ',
        Í∏çÏ†ïÏã†Ìò∏: ['ÎãπÎá®Î≥ë ÏπòÎ£åÏ†ú', 'ÎπÑÎßå ÏπòÎ£å', 'Ïã†ÏïΩ Í∞úÎ∞ú'],
        Î∂ÄÏ†ïÏã†Ìò∏: ['ÌäπÌóà ÎßåÎ£å', 'Ï†úÎÑ§Î¶≠ Í≤ΩÏüÅ']
      }
    };
  }

  /**
   * üîß Í∏∞Ï°¥ Îç∞Ïù¥ÌÑ∞ ÏÇ≠Ï†ú ÌõÑ Ïò¨Î∞îÎ•∏ ÎÇ†ÏßúÎ°ú Ïû¨ÏÉùÏÑ±
   */
  async fixSentimentDates() {
    console.log('üîß Í∞êÏ†ï Î∂ÑÏÑù ÎÇ†Ïßú ÏàòÏ†ï ÏãúÏûë...');
    
    // 1. Í∏∞Ï°¥ Í∞êÏ†ï Î∂ÑÏÑù Îç∞Ïù¥ÌÑ∞ ÏÇ≠Ï†ú
    await this.clearExistingSentiments();
    
    // 2. 1ÎÖÑÏπò Î∏îÎ°úÍ∑∏ Ìè¨Ïä§Ìä∏ Ï°∞Ìöå
    const posts = await this.getBlogPosts();
    console.log(`üìù Î∂ÑÏÑùÌï† Ìè¨Ïä§Ìä∏: ${posts.length}Í∞ú`);
    
    let totalAnalyzed = 0;
    
    for (const post of posts) {
      const analyzedStocks = [];
      
      // Í∞Å Ï¢ÖÎ™©Î≥ÑÎ°ú Ìè¨Ïä§Ìä∏ÏóêÏÑú Ïñ∏Í∏â Ïó¨Î∂Ä Î∞è Í∞êÏ†ï Î∂ÑÏÑù
      for (const [ticker, stockInfo] of Object.entries(this.stockAnalysis)) {
        const mentioned = this.isStockMentioned(post, stockInfo);
        
        if (mentioned) {
          const analysis = this.directSentimentAnalysis(post, ticker, stockInfo);
          if (analysis) {
            // üîß Ï§ëÏöî: blog_postsÏùò created_date ÏÇ¨Ïö©
            await this.saveSentimentWithCorrectDate(post.id, ticker, analysis, post.created_date);
            analyzedStocks.push(`${stockInfo.name}:${analysis.sentiment}`);
          }
        }
      }
      
      if (analyzedStocks.length > 0) {
        console.log(`  üìä ${post.title.substring(0, 40)}... (${post.created_date}) ‚Üí ${analyzedStocks.join(', ')}`);
        totalAnalyzed++;
      }
    }
    
    console.log(`\n‚úÖ Í∞êÏ†ï Î∂ÑÏÑù ÎÇ†Ïßú ÏàòÏ†ï ÏôÑÎ£å: ${totalAnalyzed}Í∞ú Ìè¨Ïä§Ìä∏ Î∂ÑÏÑùÎê®`);
    this.db.close();
  }

  /**
   * Í∏∞Ï°¥ Í∞êÏ†ï Î∂ÑÏÑù Îç∞Ïù¥ÌÑ∞ ÏÇ≠Ï†ú
   */
  async clearExistingSentiments() {
    return new Promise((resolve, reject) => {
      this.db.run('DELETE FROM sentiments', (err) => {
        if (err) {
          reject(err);
        } else {
          console.log('üóëÔ∏è Í∏∞Ï°¥ Í∞êÏ†ï Î∂ÑÏÑù Îç∞Ïù¥ÌÑ∞ ÏÇ≠Ï†ú ÏôÑÎ£å');
          resolve();
        }
      });
    });
  }

  /**
   * Ìè¨Ïä§Ìä∏ÏóêÏÑú Ï¢ÖÎ™© Ïñ∏Í∏â Ïó¨Î∂Ä ÌôïÏù∏
   */
  isStockMentioned(post, stockInfo) {
    const fullText = `${post.title} ${post.content || ''}`.toLowerCase();
    return stockInfo.ÌÇ§ÏõåÎìú.some(keyword => 
      fullText.includes(keyword.toLowerCase())
    );
  }

  /**
   * üéØ ÌÅ¥Î°úÎìú AI ÏßÅÏ†ë Í∞êÏ†ï Î∂ÑÏÑù (ÌïµÏã¨Îßå)
   */
  directSentimentAnalysis(post, ticker, stockInfo) {
    const text = `${post.title} ${post.content || ''}`.toLowerCase();
    const name = stockInfo.name;
    
    // Í∏çÏ†ïÏ†Å Ïã†Ìò∏ Ï≤¥ÌÅ¨
    const positiveScore = stockInfo.Í∏çÏ†ïÏã†Ìò∏.reduce((score, signal) => {
      return text.includes(signal.toLowerCase()) ? score + 1 : score;
    }, 0);
    
    // Î∂ÄÏ†ïÏ†Å Ïã†Ìò∏ Ï≤¥ÌÅ¨  
    const negativeScore = stockInfo.Î∂ÄÏ†ïÏã†Ìò∏.reduce((score, signal) => {
      return text.includes(signal.toLowerCase()) ? score + 1 : score;
    }, 0);
    
    // ÏµúÏ¢Ö Í∞êÏ†ï ÌåêÎã®
    let sentiment = 'neutral';
    let reasoning = '';
    
    if (positiveScore > negativeScore) {
      sentiment = 'positive';
      reasoning = `${name} ${stockInfo.ÌäπÏÑ±} - Í∏çÏ†ïÏ†Å ÏöîÏù∏ ÌôïÏù∏`;
    } else if (negativeScore > positiveScore) {
      sentiment = 'negative';  
      reasoning = `${name} ${stockInfo.ÌäπÏÑ±} - Î∂ÄÏ†ïÏ†Å Î¶¨Ïä§ÌÅ¨ ÏöîÏù∏`;
    } else {
      reasoning = `${name} ${stockInfo.ÌäπÏÑ±} - Ï§ëÎ¶ΩÏ†Å Ïñ∏Í∏â`;
    }
    
    return {
      sentiment,
      score: positiveScore - negativeScore,
      reasoning
    };
  }

  /**
   * 1ÎÖÑÏπò Î∏îÎ°úÍ∑∏ Ìè¨Ïä§Ìä∏ Ï°∞Ìöå
   */
  async getBlogPosts() {
    return new Promise((resolve, reject) => {
      const oneYearAgo = new Date();
      oneYearAgo.setFullYear(oneYearAgo.getFullYear() - 1);
      const dateFrom = oneYearAgo.toISOString().split('T')[0];
      
      this.db.all(`
        SELECT id, title, content, created_date
        FROM blog_posts 
        WHERE created_date >= ?
        ORDER BY created_date DESC
      `, [dateFrom], (err, rows) => {
        if (err) reject(err);
        else resolve(rows || []);
      });
    });
  }

  /**
   * üîß Ïò¨Î∞îÎ•∏ ÎÇ†ÏßúÎ°ú Í∞êÏ†ï Î∂ÑÏÑù Í≤∞Í≥º Ï†ÄÏû• (blog_posts.created_date ÏÇ¨Ïö©)
   */
  async saveSentimentWithCorrectDate(postId, ticker, analysis, blogPostDate) {
    return new Promise((resolve, reject) => {
      // ÎÇ†Ïßú ÌòïÏãù Ï†ïÍ∑úÌôî (YYYY-MM-DD)
      const normalizedDate = blogPostDate.includes('T') ? blogPostDate.split('T')[0] : 
                            blogPostDate.includes(' ') ? blogPostDate.split(' ')[0] : 
                            blogPostDate;
      
      this.db.run(`
        INSERT OR REPLACE INTO sentiments (
          post_id, ticker, sentiment, sentiment_score, 
          key_reasoning, created_at
        ) VALUES (?, ?, ?, ?, ?, ?)
      `, [
        postId, ticker, analysis.sentiment, 
        analysis.score, analysis.reasoning, normalizedDate
      ], function(err) {
        if (err) reject(err);
        else resolve(this.lastID);
      });
    });
  }
}

// Ïã§Ìñâ
const fixer = new SentimentDateFixer();
fixer.fixSentimentDates().catch(console.error);