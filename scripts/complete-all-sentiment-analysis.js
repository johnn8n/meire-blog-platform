/**
 * üéØ Î™®Îì† Î©îÎ•¥ Ïñ∏Í∏âÏóê ÎåÄÌïú Í∞êÏ†ï Î∂ÑÏÑù ÏôÑÎ£å
 */

const sqlite3 = require('sqlite3').verbose();
const path = require('path');

class CompleteSentimentAnalyzer {
  constructor() {
    const dbPath = path.join(process.cwd(), 'database.db');
    this.db = new sqlite3.Database(dbPath);
    
    // Ï¢ÖÎ™©Î≥Ñ ÌÇ§ÏõåÎìú Îß§Ìïë ÌôïÏû•
    this.stockKeywords = {
      '005930': ['ÏÇºÏÑ±Ï†ÑÏûê', 'ÏÇºÏÑ±', 'Samsung', 'ÏÇºÏÑ±ÎîîÏä§ÌîåÎ†àÏù¥'],
      'TSLA': ['ÌÖåÏä¨Îùº', 'Tesla', 'ÏùºÎ°†Î®∏Ïä§ÌÅ¨', 'ÏùºÎ°† Î®∏Ïä§ÌÅ¨'],
      'AAPL': ['Ïï†Ìîå', 'Apple', 'ÏïÑÏù¥Ìè∞', 'iPhone'],
      'NVDA': ['ÏóîÎπÑÎîîÏïÑ', 'NVIDIA', 'GPU'],
      'INTC': ['Ïù∏ÌÖî', 'Intel'],
      'GOOGL': ['Íµ¨Í∏Ä', 'Google', 'ÏïåÌååÎ≤≥', 'Alphabet'],
      'MSFT': ['ÎßàÏù¥ÌÅ¨Î°úÏÜåÌîÑÌä∏', 'Microsoft', 'MS', 'ÎßàÏÜå'],
      'META': ['Î©îÌÉÄ', 'Meta', 'ÌéòÏù¥Ïä§Î∂Å', 'Facebook'],
      '267250': ['HDÌòÑÎåÄ', 'HDÌïúÍµ≠Ï°∞ÏÑ†Ìï¥Ïñë', 'ÌòÑÎåÄÏ§ëÍ≥µÏóÖ', 'ÌòÑÎåÄ'],
      '042660': ['ÌïúÌôîÏò§ÏÖò', 'ÌïúÌôîÏãúÏä§ÌÖú', 'ÌïúÌôîÏóêÏñ¥Î°úÏä§ÌéòÏù¥Ïä§', 'ÌïúÌôî'],
      '010620': ['ÌòÑÎåÄÎØ∏Ìè¨Ï°∞ÏÑ†', 'ÌòÑÎåÄÎØ∏Ìè¨', 'ÎØ∏Ìè¨Ï°∞ÏÑ†'],
      'LLY': ['ÏùºÎùºÏù¥Î¶¥Î¶¨', 'Eli Lilly', 'Î¶¥Î¶¨', 'Lilly', 'ÎßàÏö¥ÏûêÎ°ú'],
      'UNH': ['Ïú†ÎÇòÏù¥Ìã∞ÎìúÌó¨Ïä§ÏºÄÏñ¥', 'UnitedHealth', 'Ïú†ÎÇòÏù¥Ìã∞ÎìúÌó¨Ïä§', 'UnitedHealthcare']
    };

    // Ï¢ÖÎ™©Î≥Ñ Í∞êÏ†ï Î∂ÑÏÑù Ìå®ÌÑ¥
    this.sentimentPatterns = {
      '005930': {
        name: 'ÏÇºÏÑ±Ï†ÑÏûê',
        ÌäπÏÑ±: 'AI ÏàòÏöîÏôÄ Î©îÎ™®Î¶¨ ÏÇ¨Ïù¥ÌÅ¥Ïóê ÎØºÍ∞êÌïú Î∞òÎèÑÏ≤¥ ÎåÄÌëúÏ£º',
        Í∏çÏ†ïÏã†Ìò∏: ['Î©îÎ™®Î¶¨ Ìò∏Ìô©', 'AI ÏàòÏöî', 'Ïï†Ìîå Í≥ÑÏïΩ', 'Î∞òÎèÑÏ≤¥ ÌöåÎ≥µ', 'HBM', 'DRAM Í∞ÄÍ≤© ÏÉÅÏäπ', 'ÌååÏö¥ÎìúÎ¶¨ ÏàòÏ£º'],
        Î∂ÄÏ†ïÏã†Ìò∏: ['Î©îÎ™®Î¶¨ Ïπ®Ï≤¥', 'Ï§ëÍµ≠ Í≤ΩÏüÅ', 'Ïï†Ìîå ÏùòÏ°¥ÎèÑ', 'DRAM Í∞ÄÍ≤© ÌïòÎùΩ', 'Ï§ëÍµ≠ Î©îÎ™®Î¶¨']
      },
      'TSLA': {
        name: 'ÌÖåÏä¨Îùº',
        ÌäπÏÑ±: 'Ï†ÑÍ∏∞Ï∞® ÌòÅÏã†Í≥º ÏûêÏú®Ï£ºÌñâ ÍøàÏùò ÏÉÅÏßï',
        Í∏çÏ†ïÏã†Ìò∏: ['Ï†ÑÍ∏∞Ï∞® ÏàòÏöî', 'ÏûêÏú®Ï£ºÌñâ Î∞úÏ†Ñ', 'Ï§ëÍµ≠ ÏÑ±Í≥µ', 'FSD', 'Î∞∞ÌÑ∞Î¶¨ Í∏∞Ïà†'],
        Î∂ÄÏ†ïÏã†Ìò∏: ['Ï§ëÍµ≠ Í≤ΩÏüÅ', 'Í∞ÄÍ≤© Ï†ÑÏüÅ', 'ÏûêÏú®Ï£ºÌñâ ÏßÄÏó∞', 'BYD', 'ÌåêÎß§ Î∂ÄÏßÑ']
      },
      'NVDA': {
        name: 'ÏóîÎπÑÎîîÏïÑ',
        ÌäπÏÑ±: 'AI ÌòÅÎ™ÖÏùò ÌïµÏã¨ ÏàòÌòúÏ£º, GPU Ï†àÎåÄÍ∞ïÏûê',
        Í∏çÏ†ïÏã†Ìò∏: ['AI Î∂ê', 'Îç∞Ïù¥ÌÑ∞ÏÑºÌÑ∞ ÏàòÏöî', 'ChatGPT Ïó¥Ìíç', 'H100', 'GPU ÏàòÏöî'],
        Î∂ÄÏ†ïÏã†Ìò∏: ['Ï§ëÍµ≠ Ï†úÏû¨', 'AI Î≤ÑÎ∏î', 'Í≤ΩÏüÅ Ïã¨Ìôî', 'ÏàòÏ∂ú Í∏àÏßÄ']
      },
      'AAPL': {
        name: 'Ïï†Ìîå',
        ÌäπÏÑ±: 'ÌòÅÏã†Í≥º ÌîÑÎ¶¨ÎØ∏ÏóÑÏùò ÎåÄÎ™ÖÏÇ¨',
        Í∏çÏ†ïÏã†Ìò∏: ['ÏïÑÏù¥Ìè∞ Ïã†Ï†úÌíà', 'AI Í∏∞Îä•', 'ÏÑúÎπÑÏä§ ÏÑ±Ïû•', 'Ïã†Ï†úÌíà Ï∂úÏãú'],
        Î∂ÄÏ†ïÏã†Ìò∏: ['Ï§ëÍµ≠ ÌåêÎß§ Î∂ÄÏßÑ', 'ÌòÅÏã† ÌïúÍ≥Ñ', 'Îß§Ï∂ú Í∞êÏÜå']
      },
      '267250': {
        name: 'HDÌòÑÎåÄ',
        ÌäπÏÑ±: 'Ï°∞ÏÑ†ÏóÖÍ≥Ñ ÎåÄÌëú, ÏπúÌôòÍ≤Ω ÏÑ†Î∞ïÏùò ÎØ∏Îûò',
        Í∏çÏ†ïÏã†Ìò∏: ['ÏπúÌôòÍ≤Ω ÏÑ†Î∞ï', 'Ìï¥ÏÉÅÌíçÎ†•', 'Ï†ïÎ∂Ä ÏßÄÏõê', 'LNG ÏÑ†Î∞ï', 'ÏàòÏ£º'],
        Î∂ÄÏ†ïÏã†Ìò∏: ['Ï§ëÍµ≠ Ï°∞ÏÑ† Í≤ΩÏüÅ', 'ÏõêÏûêÏû¨ Í∞ÄÍ≤©', 'ÏàòÏ£º Ïã§Ìå®']
      },
      'LLY': {
        name: 'ÏùºÎùºÏù¥Î¶¥Î¶¨',
        ÌäπÏÑ±: 'ÎãπÎá®¬∑ÎπÑÎßå ÏπòÎ£åÏ†úÏùò ÌòÅÏã† ÏÑ†ÎèÑ',
        Í∏çÏ†ïÏã†Ìò∏: ['ÎãπÎá®Î≥ë ÏπòÎ£åÏ†ú', 'ÎπÑÎßå ÏπòÎ£å', 'Ïã†ÏïΩ Í∞úÎ∞ú', 'ÎßàÏö¥ÏûêÎ°ú', 'FDA ÏäπÏù∏'],
        Î∂ÄÏ†ïÏã†Ìò∏: ['ÌäπÌóà ÎßåÎ£å', 'Ï†úÎÑ§Î¶≠ Í≤ΩÏüÅ', 'ÏûÑÏÉÅ Ïã§Ìå®']
      }
    };
  }

  /**
   * üéØ Î™®Îì† Î©îÎ•¥ Ïñ∏Í∏âÏóê ÎåÄÌïú ÏôÑÏ†ÑÌïú Í∞êÏ†ï Î∂ÑÏÑù
   */
  async completeAllSentimentAnalysis() {
    console.log('üéØ Î™®Îì† Î©îÎ•¥ Ïñ∏Í∏â Í∞êÏ†ï Î∂ÑÏÑù ÏôÑÎ£å ÏûëÏóÖ ÏãúÏûë...');
    
    // Î™®Îì† Ï¢ÖÎ™©Î≥Ñ Î©îÎ•¥ Ïñ∏Í∏â vs Í∞êÏ†ï Î∂ÑÏÑù ÎπÑÍµê
    for (const ticker of Object.keys(this.stockKeywords)) {
      console.log(`\nüìä ${ticker} Î∂ÑÏÑù Ï§ë...`);
      
      // Î©îÎ•¥ Ïñ∏Í∏â Ìè¨Ïä§Ìä∏ Ï°∞Ìöå
      const mentionedPosts = await this.getMentionedPosts(ticker);
      console.log(`  üìù Î©îÎ•¥ Ïñ∏Í∏â: ${mentionedPosts.length}Í∞ú`);
      
      // Í∏∞Ï°¥ Í∞êÏ†ï Î∂ÑÏÑù Ï°∞Ìöå
      const existingSentiments = await this.getExistingSentiments(ticker);
      console.log(`  üéØ Í∏∞Ï°¥ Í∞êÏ†ï Î∂ÑÏÑù: ${existingSentiments.length}Í∞ú`);
      
      // ÎàÑÎùΩÎêú Ìè¨Ïä§Ìä∏ Ï∞æÍ∏∞
      const existingPostIds = new Set(existingSentiments.map(s => s.post_id));
      const missingPosts = mentionedPosts.filter(post => !existingPostIds.has(post.id));
      
      if (missingPosts.length > 0) {
        console.log(`  ‚ùó ÎàÑÎùΩÎêú Í∞êÏ†ï Î∂ÑÏÑù: ${missingPosts.length}Í∞ú`);
        
        // ÎàÑÎùΩÎêú Ìè¨Ïä§Ìä∏Îì§Ïóê ÎåÄÌï¥ Í∞êÏ†ï Î∂ÑÏÑù ÏàòÌñâ
        for (const post of missingPosts) {
          const analysis = this.performSentimentAnalysis(post, ticker);
          if (analysis) {
            await this.saveSentimentWithCorrectDate(post.id, ticker, analysis, post.created_date);
            console.log(`    ‚úÖ ${post.title.substring(0, 30)}... ‚Üí ${analysis.sentiment}`);
          }
        }
      } else {
        console.log(`  ‚úÖ Î™®Îì† Ïñ∏Í∏âÏóê ÎåÄÌïú Í∞êÏ†ï Î∂ÑÏÑù ÏôÑÎ£å`);
      }
    }
    
    console.log('\nüéâ Ï†ÑÏ≤¥ Í∞êÏ†ï Î∂ÑÏÑù ÏôÑÎ£å ÏûëÏóÖ ÎÅù!');
    this.db.close();
  }

  /**
   * ÌäπÏ†ï Ï¢ÖÎ™©Ïù¥ Ïñ∏Í∏âÎêú Î™®Îì† Ìè¨Ïä§Ìä∏ Ï°∞Ìöå
   */
  async getMentionedPosts(ticker) {
    return new Promise((resolve, reject) => {
      const keywords = this.stockKeywords[ticker] || [ticker];
      
      // Í≤ÄÏÉâ Ï°∞Í±¥ ÏÉùÏÑ±
      const searchConditions = keywords.map(() => 
        '(title LIKE ? OR content LIKE ? OR excerpt LIKE ?)'
      ).join(' OR ');
      
      const searchParams = [];
      keywords.forEach(keyword => {
        const pattern = `%${keyword}%`;
        searchParams.push(pattern, pattern, pattern);
      });
      
      const query = `
        SELECT id, title, content, excerpt, created_date
        FROM blog_posts 
        WHERE (${searchConditions})
        ORDER BY created_date DESC
      `;
      
      this.db.all(query, searchParams, (err, rows) => {
        if (err) reject(err);
        else resolve(rows || []);
      });
    });
  }

  /**
   * Í∏∞Ï°¥ Í∞êÏ†ï Î∂ÑÏÑù Í≤∞Í≥º Ï°∞Ìöå
   */
  async getExistingSentiments(ticker) {
    return new Promise((resolve, reject) => {
      this.db.all(`
        SELECT post_id, sentiment, key_reasoning
        FROM sentiments 
        WHERE ticker = ?
      `, [ticker], (err, rows) => {
        if (err) reject(err);
        else resolve(rows || []);
      });
    });
  }

  /**
   * üéØ Ìè¨Ïä§Ìä∏Î≥Ñ Í∞êÏ†ï Î∂ÑÏÑù ÏàòÌñâ
   */
  performSentimentAnalysis(post, ticker) {
    const text = `${post.title} ${post.content || ''}`.toLowerCase();
    const stockInfo = this.sentimentPatterns[ticker];
    
    if (!stockInfo) {
      // Í∏∞Î≥∏ Ìå®ÌÑ¥Ïù¥ ÏóÜÎäî Ï¢ÖÎ™©ÏùÄ Ï§ëÎ¶ΩÏúºÎ°ú Ï≤òÎ¶¨
      return {
        sentiment: 'neutral',
        score: 0,
        reasoning: `${ticker} Í¥ÄÎ†® ÏùºÎ∞òÏ†Å Ïñ∏Í∏â`
      };
    }
    
    // Í∏çÏ†ïÏ†Å Ïã†Ìò∏ Ï≤¥ÌÅ¨
    const positiveScore = stockInfo.Í∏çÏ†ïÏã†Ìò∏.reduce((score, signal) => {
      return text.includes(signal.toLowerCase()) ? score + 1 : score;
    }, 0);
    
    // Î∂ÄÏ†ïÏ†Å Ïã†Ìò∏ Ï≤¥ÌÅ¨  
    const negativeScore = stockInfo.Î∂ÄÏ†ïÏã†Ìò∏.reduce((score, signal) => {
      return text.includes(signal.toLowerCase()) ? score + 1 : score;
    }, 0);
    
    // ÏµúÏ¢Ö Í∞êÏ†ï ÌåêÎã®
    let sentiment = 'neutral';
    let reasoning = '';
    
    if (positiveScore > negativeScore) {
      sentiment = 'positive';
      reasoning = `${stockInfo.name} ${stockInfo.ÌäπÏÑ±} - Í∏çÏ†ïÏ†Å ÏöîÏù∏ ÌôïÏù∏`;
    } else if (negativeScore > positiveScore) {
      sentiment = 'negative';  
      reasoning = `${stockInfo.name} ${stockInfo.ÌäπÏÑ±} - Î∂ÄÏ†ïÏ†Å Î¶¨Ïä§ÌÅ¨ ÏöîÏù∏`;
    } else {
      reasoning = `${stockInfo.name} ${stockInfo.ÌäπÏÑ±} - Ï§ëÎ¶ΩÏ†Å Ïñ∏Í∏â`;
    }
    
    return {
      sentiment,
      score: positiveScore - negativeScore,
      reasoning
    };
  }

  /**
   * üîß Ïò¨Î∞îÎ•∏ ÎÇ†ÏßúÎ°ú Í∞êÏ†ï Î∂ÑÏÑù Í≤∞Í≥º Ï†ÄÏû•
   */
  async saveSentimentWithCorrectDate(postId, ticker, analysis, blogPostDate) {
    return new Promise((resolve, reject) => {
      // ÎÇ†Ïßú ÌòïÏãù Ï†ïÍ∑úÌôî (YYYY-MM-DD)
      const normalizedDate = blogPostDate.includes('T') ? blogPostDate.split('T')[0] : 
                            blogPostDate.includes(' ') ? blogPostDate.split(' ')[0] : 
                            blogPostDate;
      
      this.db.run(`
        INSERT OR REPLACE INTO sentiments (
          post_id, ticker, sentiment, sentiment_score, 
          key_reasoning, created_at
        ) VALUES (?, ?, ?, ?, ?, ?)
      `, [
        postId, ticker, analysis.sentiment, 
        analysis.score, analysis.reasoning, normalizedDate
      ], function(err) {
        if (err) reject(err);
        else resolve(this.lastID);
      });
    });
  }
}

// Ïã§Ìñâ
const analyzer = new CompleteSentimentAnalyzer();
analyzer.completeAllSentimentAnalysis().catch(console.error);