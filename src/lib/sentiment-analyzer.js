/**
 * AI Í∏∞Î∞ò Ìè¨Ïä§Ìä∏ Í∞êÏ†ï Î∂ÑÏÑù ÏãúÏä§ÌÖú
 * 
 * Í∞Å Ìè¨Ïä§Ìä∏ÏóêÏÑú Ïñ∏Í∏âÎêú Ï¢ÖÎ™©Ïóê ÎåÄÌïú Í∞êÏ†ï(Í∏çÏ†ï/Î∂ÄÏ†ï/Ï§ëÎ¶Ω)ÏùÑ Î∂ÑÏÑùÌïòÏó¨
 * post_stock_sentiments ÌÖåÏù¥Î∏îÏóê Ï†ÄÏû•
 */

const StockDB = require('./stock-db-sqlite3');

class SentimentAnalyzer {
  constructor() {
    this.stockDB = new StockDB();
    
    // Ï¢ÖÎ™©Î™Ö Îß§Ìïë (ÌöåÏÇ¨Î™Ö Î≥ÄÌòï Ìè¨Ìï®)
    this.tickerToNameMap = {
      '005930': ['ÏÇºÏÑ±Ï†ÑÏûê', 'ÏÇºÏÑ±', 'ÏÇºÏÑ±ÎîîÏä§ÌîåÎ†àÏù¥'],
      'TSLA': ['ÌÖåÏä¨Îùº', 'Tesla'],
      'AAPL': ['Ïï†Ìîå', 'Apple'],
      'NVDA': ['ÏóîÎπÑÎîîÏïÑ', 'NVIDIA'],
      'INTC': ['Ïù∏ÌÖî', 'Intel'],
      'TSMC': ['TSMC', 'ÎåÄÎßåÎ∞òÎèÑÏ≤¥'],
      '042660': ['ÌïúÌôîÏò§ÏÖò', 'ÌïúÌôîÏãúÏä§ÌÖú'],
      '267250': ['HDÌòÑÎåÄ', 'HDÌïúÍµ≠Ï°∞ÏÑ†Ìï¥Ïñë'],
      'MSFT': ['ÎßàÏù¥ÌÅ¨Î°úÏÜåÌîÑÌä∏', 'Microsoft'],
      'GOOGL': ['Íµ¨Í∏Ä', 'Google', 'ÏïåÌååÎ≤≥'],
      'AMZN': ['ÏïÑÎßàÏ°¥', 'Amazon'],
      'META': ['Î©îÌÉÄ', 'Meta', 'ÌéòÏù¥Ïä§Î∂Å']
    };

    // Í∞êÏ†ï Î∂ÑÏÑùÏö© ÌÇ§ÏõåÎìú ÏÇ¨Ï†Ñ
    this.sentimentKeywords = {
      positive: [
        'ÏÉÅÏäπ', 'Ï¶ùÍ∞Ä', 'ÏÑ±Ïû•', 'Ìò∏Ïû¨', 'Í∏çÏ†ïÏ†Å', 'Ï¢ãÏùÄ', 'Ïú†Îßù', 'Ï†ÑÎßù', 'Í∏∞ÎåÄ',
        'Ìà¨Ïûê', 'Ï∂îÏ≤ú', 'Îß§Ïàò', 'Î™©ÌëúÍ∞Ä', 'ÏÉÅÌñ•', 'Í∞úÏÑ†', 'ÌòÅÏã†', 'ÏÑ†ÎèÑ', 'Î¶¨Îçî',
        'Ïã§Ï†Å', 'ÏàòÏùµ', 'Ïù¥Ïùµ', 'ÌùëÏûê', 'ÎèåÌåå', 'Ïã†Í∏∞Î°ù', 'ÏµúÍ≥†', 'ÏÑ±Í≥µ',
        'Í∞ïÏÑ∏', 'ÏÉÅÌñ•Ï°∞Ï†ï', 'Î™©ÌëúÏ£ºÍ∞Ä', 'Í∏âÎì±', 'Î∞òÎì±', 'ÌöåÎ≥µ'
      ],
      negative: [
        'ÌïòÎùΩ', 'Í∞êÏÜå', 'ÏïÖÏû¨', 'Î∂ÄÏ†ïÏ†Å', 'ÎÇòÏÅú', 'Ïö∞Î†§', 'ÏúÑÌóò', 'Î¶¨Ïä§ÌÅ¨',
        'Îß§ÎèÑ', 'ÌïòÌñ•', 'ÏïÖÌôî', 'ÏÜêÏã§', 'Ï†ÅÏûê', 'ÌïòÎùΩÏÑ∏', 'Í∏âÎùΩ', 'Ìè≠ÎùΩ',
        'ÏúÑÍ∏∞', 'Î¨∏Ï†ú', 'ÎÖºÎûÄ', 'Ïã§Îßù', 'Ï†ÄÏ°∞', 'Î∂ÄÏßÑ', 'Ïπ®Ï≤¥', 'ÎëîÌôî'
      ],
      neutral: [
        'Ïú†ÏßÄ', 'Î≥¥Ìï©', 'Í¥ÄÎßù', 'Ï§ëÎ¶Ω', 'Î∂ÑÏÑù', 'Í≤ÄÌÜ†', 'ÌèâÍ∞Ä', 'ÌòÑÌô©',
        'Î∞úÌëú', 'Í≥µÏãú', 'Î≥¥Í≥†', 'Ï†ÑÎßù', 'ÏòàÏÉÅ', 'Í≥ÑÌöç', 'ÏùºÎ∞òÏ†Å'
      ]
    };
  }

  /**
   * ÌÖçÏä§Ìä∏ÏóêÏÑú Ï¢ÖÎ™© Ïñ∏Í∏â Ï∞æÍ∏∞
   */
  findStockMentions(text) {
    const mentions = [];
    
    if (!text || text.trim().length === 0) {
      return mentions;
    }
    
    for (const [ticker, nameArray] of Object.entries(this.tickerToNameMap)) {
      // Ìã∞Ïª§ Îß§Ïπ≠ (ÏòÅÎ¨∏/Ïà´ÏûêÎäî word boundary ÏÇ¨Ïö©)
      const tickerRegex = new RegExp(`\\b${ticker}\\b`, 'gi');
      const tickerMatch = tickerRegex.test(text);
      
      let nameMatch = false;
      let matchedName = '';
      
      // Í∞Å Ïù¥Î¶Ñ Î≥ÄÌòï Ï≤¥ÌÅ¨ (ÌïúÍ∏ÄÏùÄ word boundary ÏóÜÏù¥)
      for (const name of nameArray) {
        // ÌïúÍ∏ÄÏù¥ Ìè¨Ìï®Îêú Í≤ΩÏö∞Îäî Îã®Ïàú Ìè¨Ìï® Í≤ÄÏÇ¨, ÏòÅÎ¨∏ÏùÄ word boundary ÏÇ¨Ïö©
        const isKorean = /[Í∞Ä-Ìû£]/.test(name);
        let nameRegex;
        
        if (isKorean) {
          // ÌïúÍ∏ÄÏùò Í≤ΩÏö∞: Îã®Ïàú Ìè¨Ìï® Í≤ÄÏÇ¨
          nameRegex = new RegExp(name, 'gi');
        } else {
          // ÏòÅÎ¨∏Ïùò Í≤ΩÏö∞: word boundary ÏÇ¨Ïö©
          nameRegex = new RegExp(`\\b${name}\\b`, 'gi');
        }
        
        if (nameRegex.test(text)) {
          nameMatch = true;
          matchedName = name;
          console.log(`üéØ Found ${isKorean ? 'Korean' : 'English'} name match: ${name} in text`);
          break;
        }
      }
      
      if (tickerMatch || nameMatch) {
        const displayName = matchedName || nameArray[0];
        console.log(`‚úÖ Final match: ${ticker} (${displayName}) in text`);
        mentions.push({
          ticker,
          name: displayName,
          contexts: this.extractContext(text, [ticker, ...nameArray])
        });
      }
    }
    
    return mentions;
  }

  /**
   * Ïª®ÌÖçÏä§Ìä∏ Ï∂îÏ∂ú (Ï¢ÖÎ™© Ïñ∏Í∏â Ï£ºÎ≥Ä ÌÖçÏä§Ìä∏)
   */
  extractContext(text, terms, windowSize = 100) {
    const contexts = [];
    
    for (const term of terms) {
      const regex = new RegExp(`\\b${term}\\b`, 'gi');
      let match;
      
      while ((match = regex.exec(text)) !== null) {
        const start = Math.max(0, match.index - windowSize);
        const end = Math.min(text.length, match.index + term.length + windowSize);
        const context = text.slice(start, end).trim();
        
        if (context && !contexts.includes(context)) {
          contexts.push(context);
        }
      }
    }
    
    return contexts;
  }

  /**
   * Í∑úÏπô Í∏∞Î∞ò Í∞êÏ†ï Î∂ÑÏÑù
   */
  analyzeRuleBased(text, contexts) {
    const allText = [text, ...contexts].join(' ').toLowerCase();
    
    let positiveScore = 0;
    let negativeScore = 0;
    let neutralScore = 0;
    
    const foundKeywords = {
      positive: [],
      negative: [],
      neutral: []
    };

    // ÌÇ§ÏõåÎìú Îß§Ïπ≠ Î∞è Ï†êÏàò Í≥ÑÏÇ∞
    for (const [sentiment, keywords] of Object.entries(this.sentimentKeywords)) {
      for (const keyword of keywords) {
        const regex = new RegExp(`\\b${keyword}\\b`, 'gi');
        const matches = allText.match(regex);
        
        if (matches) {
          foundKeywords[sentiment].push(...matches);
          
          if (sentiment === 'positive') {
            positiveScore += matches.length;
          } else if (sentiment === 'negative') {
            negativeScore += matches.length;
          } else {
            neutralScore += matches.length;
          }
        }
      }
    }

    // Ï†ÑÏ≤¥ Ï†êÏàò
    const totalScore = positiveScore + negativeScore + neutralScore;
    
    if (totalScore === 0) {
      return {
        sentiment: 'neutral',
        score: 0.0,
        confidence: 0.3, // ÎÇÆÏùÄ Ïã†Î¢∞ÎèÑ
        keywords: foundKeywords
      };
    }

    // Í∞êÏ†ï Í≤∞Ï†ï
    let sentiment, score, confidence;
    
    if (positiveScore > negativeScore && positiveScore > neutralScore) {
      sentiment = 'positive';
      score = Math.min(1.0, positiveScore / Math.max(1, totalScore));
      confidence = Math.min(1.0, positiveScore / Math.max(1, positiveScore + negativeScore));
    } else if (negativeScore > positiveScore && negativeScore > neutralScore) {
      sentiment = 'negative'; 
      score = -Math.min(1.0, negativeScore / Math.max(1, totalScore));
      confidence = Math.min(1.0, negativeScore / Math.max(1, positiveScore + negativeScore));
    } else {
      sentiment = 'neutral';
      score = 0.0;
      confidence = 0.5;
    }

    return {
      sentiment,
      score: Math.round(score * 1000) / 1000, // ÏÜåÏàòÏ†ê 3ÏûêÎ¶¨
      confidence: Math.round(confidence * 1000) / 1000,
      keywords: foundKeywords
    };
  }

  /**
   * Îã®Ïùº Ìè¨Ïä§Ìä∏ Í∞êÏ†ï Î∂ÑÏÑù
   */
  async analyzePost(post) {
    try {
      const fullText = [post.title, post.content, post.excerpt].filter(Boolean).join(' ');
      console.log(`üìÑ Analyzing post: "${post.title}" (content length: ${fullText.length})`);
      
      const stockMentions = this.findStockMentions(fullText);
      
      if (stockMentions.length === 0) {
        console.log(`‚ö†Ô∏è No stock mentions found in: "${post.title}"`);
        return [];
      }
      
      console.log(`‚úÖ Found ${stockMentions.length} stock mentions in: "${post.title}"`);

      const results = [];
      
      for (const mention of stockMentions) {
        const analysis = this.analyzeRuleBased(fullText, mention.contexts);
        
        results.push({
          post_id: post.id,
          ticker: mention.ticker,
          sentiment: analysis.sentiment,
          sentiment_score: analysis.score,
          confidence: analysis.confidence,
          keywords: JSON.stringify(analysis.keywords),
          context_snippet: mention.contexts[0] || fullText.slice(0, 200) + '...'
        });
        
        console.log(`üìä ${mention.ticker} (${mention.name}): ${analysis.sentiment} (${analysis.score}) - confidence: ${analysis.confidence}`);
      }
      
      return results;
      
    } catch (error) {
      console.error('Ìè¨Ïä§Ìä∏ Í∞êÏ†ï Î∂ÑÏÑù Ïã§Ìå®:', error);
      return [];
    }
  }

  /**
   * Í∞êÏ†ï Î∂ÑÏÑù Í≤∞Í≥ºÎ•º DBÏóê Ï†ÄÏû•
   */
  async saveSentimentToDB(sentimentResults) {
    if (!sentimentResults || sentimentResults.length === 0) {
      return;
    }

    try {
      await this.stockDB.connect();
      
      for (const result of sentimentResults) {
        await new Promise((resolve, reject) => {
          this.stockDB.db.run(`
            INSERT OR REPLACE INTO post_stock_sentiments 
            (post_id, ticker, sentiment, sentiment_score, confidence, keywords, context_snippet)
            VALUES (?, ?, ?, ?, ?, ?, ?)
          `, [
            result.post_id,
            result.ticker,
            result.sentiment,
            result.sentiment_score,
            result.confidence,
            result.keywords,
            result.context_snippet
          ], (err) => {
            if (err) {
              reject(err);
            } else {
              resolve();
            }
          });
        });
      }
      
      console.log(`‚úÖ Saved ${sentimentResults.length} sentiment analysis results to DB`);
      
    } catch (error) {
      console.error('Í∞êÏ†ï Î∂ÑÏÑù Í≤∞Í≥º Ï†ÄÏû• Ïã§Ìå®:', error);
      throw error;
    } finally {
      this.stockDB.close();
    }
  }

  /**
   * Î™®Îì† Ìè¨Ïä§Ìä∏ Î∞∞Ïπò Î∂ÑÏÑù
   */
  async analyzeAllPosts(limit = 100) {
    try {
      await this.stockDB.connect();
      
      // ÏïÑÏßÅ Î∂ÑÏÑùÎêòÏßÄ ÏïäÏùÄ Ìè¨Ïä§Ìä∏Îì§ Í∞ÄÏ†∏Ïò§Í∏∞
      const posts = await new Promise((resolve, reject) => {
        this.stockDB.db.all(`
          SELECT DISTINCT bp.id, bp.title, bp.content, bp.excerpt, bp.created_date
          FROM blog_posts bp
          LEFT JOIN post_stock_sentiments pss ON bp.id = pss.post_id
          WHERE pss.post_id IS NULL
          ORDER BY bp.created_date DESC
          LIMIT ?
        `, [limit], (err, rows) => {
          if (err) {
            reject(err);
          } else {
            resolve(rows || []);
          }
        });
      });

      console.log(`üîç Found ${posts.length} posts to analyze for sentiment`);
      
      let totalResults = [];
      
      for (let i = 0; i < posts.length; i++) {
        const post = posts[i];
        console.log(`\nüìù Analyzing post ${i + 1}/${posts.length}: "${post.title.slice(0, 50)}..."`);
        
        const results = await this.analyzePost(post);
        if (results.length > 0) {
          await this.saveSentimentToDB(results);
          totalResults = totalResults.concat(results);
        }
        
        // ÏßÑÌñâ ÏÉÅÌô© ÌëúÏãú
        if ((i + 1) % 10 === 0) {
          console.log(`\n‚úÖ Processed ${i + 1}/${posts.length} posts`);
        }
      }
      
      console.log(`\nüéâ Sentiment analysis completed! Total results: ${totalResults.length}`);
      return totalResults;
      
    } catch (error) {
      console.error('Î∞∞Ïπò Í∞êÏ†ï Î∂ÑÏÑù Ïã§Ìå®:', error);
      throw error;
    } finally {
      this.stockDB.close();
    }
  }

  /**
   * ÌäπÏ†ï Ï¢ÖÎ™©Ïùò Í∞êÏ†ï Î∂ÑÏÑù Í≤∞Í≥º Ï°∞Ìöå
   */
  async getSentimentByTicker(ticker, limit = 10) {
    try {
      await this.stockDB.connect();
      
      const results = await new Promise((resolve, reject) => {
        this.stockDB.db.all(`
          SELECT 
            pss.*,
            bp.title,
            bp.created_date as post_date
          FROM post_stock_sentiments pss
          JOIN blog_posts bp ON pss.post_id = bp.id
          WHERE pss.ticker = ?
          ORDER BY bp.created_date DESC
          LIMIT ?
        `, [ticker, limit], (err, rows) => {
          if (err) {
            reject(err);
          } else {
            resolve(rows || []);
          }
        });
      });

      return results;
      
    } catch (error) {
      console.error('Í∞êÏ†ï Î∂ÑÏÑù Í≤∞Í≥º Ï°∞Ìöå Ïã§Ìå®:', error);
      return [];
    } finally {
      this.stockDB.close();
    }
  }
}

module.exports = SentimentAnalyzer;