import { NextRequest, NextResponse } from 'next/server';

const { getStockDB } = require('@/lib/stock-db-sqlite3');
import { performantDb } from '@/lib/db-performance';

export async function GET(
  request: NextRequest,
  context: { params: Promise<{ ticker: string }> }
) {
  try {
    const { ticker } = await context.params;
    const { searchParams } = new URL(request.url);
    const period = searchParams.get('period') || '6mo';
    
    console.log(`üìä Fetching sentiment data for ${ticker} (${period})`);
    
    // üö® stock-page-requirements.md Ï§ÄÏàò: ÌóàÏö©Îêú 4Í∞ú ÌÖåÏù¥Î∏îÎßå ÏÇ¨Ïö©
    // ÌóàÏö© ÌÖåÏù¥Î∏î: stocks, stock_prices, blog_posts, post_stock_sentiments
    
    // Period to days mapping
    const periodDays = 
      (period === '1M' || period === '1mo') ? 30 :
      (period === '3M' || period === '3mo') ? 90 :
      (period === '6M' || period === '6mo') ? 180 : 365;
    const startDate = new Date();
    startDate.setDate(startDate.getDate() - periodDays);
    const startDateString = startDate.toISOString().replace('T', ' ').replace('Z', '');
    
    // üî• post_stock_sentiments ÌÖåÏù¥Î∏îÏóêÏÑú Í∞êÏ†ï Î∂ÑÏÑù Îç∞Ïù¥ÌÑ∞ Ï°∞Ìöå (sentiments ÌÖåÏù¥Î∏îÏóêÏÑú Î≥µÏÇ¨Îê®)
    const query = `
      SELECT 
        pss.sentiment,
        pss.reasoning as key_reasoning,
        pss.analyzed_at as created_date,
        pss.post_id,
        pss.confidence,
        bp.title as post_title,
        bp.published_date,
        DATE(bp.published_date) as date_key
      FROM post_stock_sentiments pss
      LEFT JOIN blog_posts bp ON pss.post_id = bp.id
      WHERE pss.ticker = ? AND pss.analyzed_at >= ?
      ORDER BY bp.published_date DESC
      LIMIT 100
    `;
    
    const cacheKey = `sentiments-${ticker}-${period}-v4`;
    let sentimentData: any[] = [];
    
    try {
      sentimentData = await performantDb.query(
        query, 
        [ticker, startDateString], 
        cacheKey, 
        300000 // 5Î∂Ñ Ï∫êÏãú
      );
      console.log(`‚ö° Found ${sentimentData.length} sentiment records for ${ticker}`);
    } catch (error) {
      console.error('üí• post_stock_sentiments ÌÖåÏù¥Î∏î Ï°∞Ìöå Ïã§Ìå®:', error);
      
      // üö® Î™ÖÌôïÌïú Î¨∏Ï†ú ÌëúÏãú - stock-page-requirements.md ÏúÑÎ∞ò ÏÉÅÌô©
      if (error instanceof Error && error.message.includes('no such table')) {
        console.error('üö® CRITICAL: post_stock_sentiments ÌÖåÏù¥Î∏îÏù¥ Ï°¥Ïû¨ÌïòÏßÄ ÏïäÏùå - stock-page-requirements.md ÏúÑÎ∞ò');
        return NextResponse.json({
          error: 'post_stock_sentiments ÌÖåÏù¥Î∏îÏù¥ Ï°¥Ïû¨ÌïòÏßÄ ÏïäÏùå',
          code: 'TABLE_NOT_FOUND', 
          message: 'stock-page-requirements.mdÏóêÏÑú ÏöîÍµ¨ÌïòÎäî post_stock_sentiments ÌÖåÏù¥Î∏îÏù¥ Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§Ïóê ÏóÜÏäµÎãàÎã§.'
        }, { status: 500 });
      }
      
      // Îã§Î•∏ Ïò§Î•òÎèÑ Î™ÖÌôïÌûà ÌëúÏãú
      return NextResponse.json({
        error: 'Í∞êÏ†ï Î∂ÑÏÑù Îç∞Ïù¥ÌÑ∞ Ï°∞Ìöå Ïã§Ìå®',
        code: 'SENTIMENT_QUERY_FAILED',
        details: error instanceof Error ? error.message : String(error)
      }, { status: 500 });
    }
    
    // üö® Îç∞Ïù¥ÌÑ∞ ÏóÜÏùåÏùÑ Î™ÖÌôïÌûà ÌëúÏãú - stock-page-requirements.md ÏúÑÎ∞ò ÏÉÅÌô©
    if (sentimentData.length === 0) {
      console.warn(`üìä INFO: ${ticker}Ïóê ÎåÄÌïú Í∞êÏ†ï Î∂ÑÏÑù Îç∞Ïù¥ÌÑ∞ ÏóÜÏùå - post_stock_sentiments ÌÖåÏù¥Î∏îÏóêÏÑú Ìï¥Îãπ Ï¢ÖÎ™© Îç∞Ïù¥ÌÑ∞ ÏóÜÏùå`);
      return NextResponse.json({
        ticker,
        period,
        sentimentByDate: {},
        summary: { positive: 0, negative: 0, neutral: 0, total: 0 },
        totalMentions: 0,
        averageConfidence: 0,
        success: true
      });
    }
    
    // üìä ÎÇ†ÏßúÎ≥Ñ Í∞êÏ†ï Î∂ÑÏÑù Îç∞Ïù¥ÌÑ∞ Í∑∏Î£πÌôî (stock-page-requirements.md ÏöîÍµ¨ÏÇ¨Ìï≠)
    const sentimentByDate: { [date: string]: any } = {};
    const summary = { positive: 0, negative: 0, neutral: 0, total: 0 };
    
    sentimentData.forEach(record => {
      const dateKey = record.date_key; // DATE(bp.published_date) ÏÇ¨Ïö©
      
      if (!sentimentByDate[dateKey]) {
        sentimentByDate[dateKey] = {
          date: dateKey,
          sentiments: [],
          posts: []
        };
      }
      
      // Í∞êÏ†ï Î∂ÑÏÑù Îç∞Ïù¥ÌÑ∞ Ï∂îÍ∞Ä (ÏöîÍµ¨ÏÇ¨Ìï≠ Íµ¨Ï°∞)
      sentimentByDate[dateKey].sentiments.push({
        sentiment: record.sentiment,
        score: 0, // sentiment_scoreÍ∞Ä ÏóÜÏúºÎØÄÎ°ú Í∏∞Î≥∏Í∞í
        confidence: parseFloat(record.confidence || '0.8'),
        reasoning: record.key_reasoning || '',
        keywords: {
          positive: [],
          negative: [],
          neutral: []
        }
      });
      
      // Ìè¨Ïä§Ìä∏ Ï†ïÎ≥¥ Ï∂îÍ∞Ä
      sentimentByDate[dateKey].posts.push({
        id: record.post_id,
        title: record.post_title || '',
        date: record.published_date || record.created_date
      });
      
      // ÏöîÏïΩ ÌÜµÍ≥Ñ ÏßëÍ≥Ñ
      if (record.sentiment === 'positive') summary.positive++;
      else if (record.sentiment === 'negative') summary.negative++;
      else if (record.sentiment === 'neutral') summary.neutral++;
      summary.total++;
    });
    
    // ÌèâÍ∑† Ïã†Î¢∞ÎèÑ Í≥ÑÏÇ∞
    const avgConfidence = sentimentData.length > 0 
      ? sentimentData.reduce((sum, item) => sum + parseFloat(item.confidence || '0.8'), 0) / sentimentData.length
      : 0;
    
    console.log(`‚úÖ Processed ${sentimentData.length} sentiment records for ${ticker} (${period})`);
    console.log(`üìà Summary: positive=${summary.positive}, negative=${summary.negative}, neutral=${summary.neutral}`);
    
    return NextResponse.json({
      success: true,
      data: {
        ticker,
        period,
        sentimentByDate,
        summary,
        totalMentions: summary.total,
        averageConfidence: Math.round(avgConfidence * 100) / 100
      }
    });
    
  } catch (error) {
    console.error('Í∞êÏ†ï Î∂ÑÏÑù Îç∞Ïù¥ÌÑ∞ Ï°∞Ìöå Ïã§Ìå®:', error);
    return NextResponse.json(
      { error: 'Failed to fetch sentiment data' }, 
      { status: 500 }
    );
  }
}