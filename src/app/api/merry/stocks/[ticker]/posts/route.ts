import { NextRequest, NextResponse } from 'next/server';
import fs from 'fs';
import path from 'path';
const { getStockDB } = require('@/lib/stock-db-sqlite3');

export async function GET(
  request: NextRequest,
  { params }: { params: Promise<{ ticker: string }> }
) {
  try {
    const resolvedParams = await params;
    const ticker = resolvedParams.ticker;
    
    // URL ÌååÎùºÎØ∏ÌÑ∞ÏóêÏÑú ÌéòÏù¥ÏßÄÎÑ§Ïù¥ÏÖò Ï†ïÎ≥¥ Ï∂îÏ∂ú
    const { searchParams } = new URL(request.url);
    const limit = parseInt(searchParams.get('limit') || '5');
    const offset = parseInt(searchParams.get('offset') || '0');
    
    console.log(`üîç Fetching posts for ${ticker}, limit: ${limit}, offset: ${offset}`);

    // Î®ºÏ†Ä SQLite Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ÏóêÏÑú Í¥ÄÎ†® Ìè¨Ïä§Ìä∏ Ï°∞Ìöå (ÌéòÏù¥ÏßÄÎÑ§Ïù¥ÏÖò ÏßÄÏõê)
    let result = await findPostsByTickerFromDB(ticker, limit, offset);
    
    // SQLiteÏóêÏÑú Í≤∞Í≥ºÍ∞Ä ÏóÜÏúºÎ©¥ JSON ÌååÏùºÏóêÏÑú fallback Ï°∞Ìöå
    if (result.total === 0) {
      result = await findPostsByTickerFromJSON(ticker, limit, offset);
    }

    return NextResponse.json({
      success: true,
      data: {
        ticker,
        posts: result.posts,
        total: result.total,
        hasMore: result.hasMore,
        limit: result.limit,
        offset: result.offset
      }
    });

  } catch (error) {
    console.error('Ï¢ÖÎ™©Î≥Ñ Ìè¨Ïä§Ìä∏ Ï°∞Ìöå Ïò§Î•ò:', error);
    return NextResponse.json({
      success: false,
      error: { message: 'Ï¢ÖÎ™©Î≥Ñ Ìè¨Ïä§Ìä∏ Ï°∞Ìöå Ïã§Ìå®' }
    }, { status: 500 });
  }
}

async function findPostsByTickerFromDB(ticker: string, limit: number, offset: number) {
  try {
    const stockDB = getStockDB();
    await stockDB.connect();
    const result = await stockDB.getRelatedPosts(ticker, limit, offset);
    stockDB.close(); // Í∏ÄÎ°úÎ≤å Ïù∏Ïä§ÌÑ¥Ïä§Îäî Ïú†ÏßÄÎê®
    
    console.log(`üìù Found ${result.total} total posts for ${ticker} from database (showing ${result.posts.length})`);
    return result;
  } catch (error) {
    console.error('Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ Ï°∞Ìöå Ïã§Ìå®:', error);
    return {
      posts: [],
      total: 0,
      hasMore: false,
      limit,
      offset
    };
  }
}

async function findPostsByTickerFromJSON(ticker: string, limit: number, offset: number) {
  try {
    // JSON ÌååÏùºÏóêÏÑú Ìï¥Îãπ Ï¢ÖÎ™©Ïùò recentPosts ÌôïÏù∏
    const dataPath = path.join(process.cwd(), 'data', 'merry-stocks-clean.json');
    
    if (fs.existsSync(dataPath)) {
      const fileContent = fs.readFileSync(dataPath, 'utf8');
      const stockData = JSON.parse(fileContent);
      
      const stock = stockData.find((s: any) => s.ticker === ticker);
      if (stock && stock.recentPosts && stock.recentPosts.length > 0) {
        const allPosts = stock.recentPosts.map((post: any) => ({
          id: post.id,
          title: post.title,
          excerpt: post.excerpt || extractExcerpt(post.title, ticker),
          published_date: post.created_date || post.date,
          views: post.views || 0,
          category: post.category || 'Ìà¨ÏûêÎ∂ÑÏÑù'
        }));
        
        const total = allPosts.length;
        const posts = allPosts.slice(offset, offset + limit);
        const hasMore = (offset + limit) < total;
        
        console.log(`üìù Found ${total} total posts for ${ticker} from JSON file (showing ${posts.length})`);
        
        return {
          posts,
          total,
          hasMore,
          limit,
          offset
        };
      }
    }

    // JSON ÌååÏùºÏóê Îç∞Ïù¥ÌÑ∞Í∞Ä ÏóÜÏúºÎ©¥ Îπà Í≤∞Í≥º Î∞òÌôò
    console.log(`‚ö†Ô∏è No posts found for ${ticker} in JSON file`);
    return {
      posts: [],
      total: 0,
      hasMore: false,
      limit,
      offset
    };

  } catch (error) {
    console.error('JSON ÌååÏùº Ï°∞Ìöå Ïã§Ìå®:', error);
    return {
      posts: [],
      total: 0,
      hasMore: false,
      limit,
      offset
    };
  }
}

function extractExcerpt(content: string, ticker: string): string {
  if (!content) return '';
  
  // tickerÍ∞Ä Ïñ∏Í∏âÎêú Î∂ÄÎ∂Ñ Ï£ºÎ≥ÄÏùò ÌÖçÏä§Ìä∏Î•º Ï∂îÏ∂ú
  const tickerIndex = content.toLowerCase().indexOf(ticker.toLowerCase());
  if (tickerIndex === -1) {
    return content.slice(0, 150) + '...';
  }
  
  const start = Math.max(0, tickerIndex - 50);
  const end = Math.min(content.length, tickerIndex + 150);
  
  let excerpt = content.slice(start, end);
  if (start > 0) excerpt = '...' + excerpt;
  if (end < content.length) excerpt = excerpt + '...';
  
  return excerpt;
}

// CLAUDE.md ÏõêÏπô: Dummy data Ï†àÎåÄ Í∏àÏßÄ - Ìï¥Îãπ Ìï®Ïàò Ï†úÍ±∞
// Ïã§Ï†ú Îç∞Ïù¥ÌÑ∞Í∞Ä ÏóÜÏúºÎ©¥ Îπà Î∞∞Ïó¥ÏùÑ Î∞òÌôòÌïòÏó¨ "Ï†ïÎ≥¥ ÏóÜÏùå" ÌëúÏãú