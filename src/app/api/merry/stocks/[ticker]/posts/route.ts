import { NextRequest, NextResponse } from 'next/server';
import fs from 'fs';
import path from 'path';
import { performantDb } from '@/lib/db-performance';

export async function GET(
  request: NextRequest,
  { params }: { params: Promise<{ ticker: string }> }
) {
  try {
    const resolvedParams = await params;
    const ticker = resolvedParams.ticker;
    
    // URL ÌååÎùºÎØ∏ÌÑ∞ÏóêÏÑú ÌéòÏù¥ÏßÄÎÑ§Ïù¥ÏÖò Î∞è Í∏∞Í∞Ñ Ï†ïÎ≥¥ Ï∂îÏ∂ú
    const { searchParams } = new URL(request.url);
    const limit = parseInt(searchParams.get('limit') || '5');
    const offset = parseInt(searchParams.get('offset') || '0');
    const period = searchParams.get('period') || '6mo'; // Í∏∞Í∞Ñ ÌååÎùºÎØ∏ÌÑ∞ Ï∂îÍ∞Ä
    
    console.log(`üîç Fetching posts for ${ticker}, period: ${period}, limit: ${limit}, offset: ${offset}`);

    // Î®ºÏ†Ä SQLite Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ÏóêÏÑú Í¥ÄÎ†® Ìè¨Ïä§Ìä∏ Ï°∞Ìöå (Í∏∞Í∞Ñ ÌïÑÌÑ∞ÎßÅ Ìè¨Ìï®)
    let result = await findPostsByTickerFromDB(ticker, limit, offset, period);
    
    // SQLiteÏóêÏÑú Í≤∞Í≥ºÍ∞Ä ÏóÜÏúºÎ©¥ JSON ÌååÏùºÏóêÏÑú fallback Ï°∞Ìöå
    if (result.total === 0) {
      result = await findPostsByTickerFromJSON(ticker, limit, offset, period);
    }

    return NextResponse.json({
      success: true,
      data: {
        ticker,
        posts: result.posts,
        total: result.total,
        hasMore: result.hasMore,
        limit: result.limit,
        offset: result.offset
      }
    });

  } catch (error) {
    console.error('Ï¢ÖÎ™©Î≥Ñ Ìè¨Ïä§Ìä∏ Ï°∞Ìöå Ïò§Î•ò:', error);
    return NextResponse.json({
      success: false,
      error: { message: 'Ï¢ÖÎ™©Î≥Ñ Ìè¨Ïä§Ìä∏ Ï°∞Ìöå Ïã§Ìå®' }
    }, { status: 500 });
  }
}

async function findPostsByTickerFromDB(ticker: string, limit: number, offset: number, period: string = '6mo') {
  try {
    // Í∏∞Í∞Ñ Í≥ÑÏÇ∞ (Stock Price APIÏôÄ ÎèôÏùºÌïú Î°úÏßÅ)
    const endDate = new Date();
    const startDate = new Date();
    
    switch (period.toLowerCase()) {
      case '1y':
      case '1year':
        startDate.setFullYear(endDate.getFullYear() - 1);
        break;
      case '6mo':
      case '6m':
        startDate.setMonth(endDate.getMonth() - 6);
        break;
      case '3mo':
      case '3m':
        startDate.setMonth(endDate.getMonth() - 3);
        break;
      case '1mo':
      case '1m':
        startDate.setMonth(endDate.getMonth() - 1);
        break;
      default:
        startDate.setMonth(endDate.getMonth() - 6);
    }
    
    const startDateStr = startDate.toISOString().split('T')[0];
    const endDateStr = endDate.toISOString().split('T')[0];
    
    console.log(`üìÖ Posts date range filter: ${startDateStr} ~ ${endDateStr} (period: ${period})`);
    
    // üîß ÏµúÏ†ÅÌôî: merry_mentioned_stocks ÌÖåÏù¥Î∏î ÌôúÏö©
    // Ï†ÑÏ≤¥ Í∞úÏàò Ï°∞Ìöå (JOIN ÏÇ¨Ïö©)
    const countQuery = `
      SELECT COUNT(DISTINCT bp.id) as total 
      FROM blog_posts bp
      JOIN merry_mentioned_stocks mms ON bp.id = mms.post_id
      WHERE mms.ticker = ?
        AND mms.mentioned_date >= ?
        AND mms.mentioned_date <= ?
    `;
    const countResult = await performantDb.query(countQuery, [ticker, startDateStr, endDateStr]);
    const total = countResult[0]?.total || 0;
    
    // Ïã§Ï†ú Ìè¨Ïä§Ìä∏ Ï°∞Ìöå (ÏµúÏ†ÅÌôîÎêú JOIN ÏøºÎ¶¨)
    const postsQuery = `
      SELECT DISTINCT bp.id, bp.title, bp.excerpt, bp.content, bp.created_date, bp.views, bp.category 
      FROM blog_posts bp
      JOIN merry_mentioned_stocks mms ON bp.id = mms.post_id
      WHERE mms.ticker = ?
        AND mms.mentioned_date >= ?
        AND mms.mentioned_date <= ?
      ORDER BY bp.created_date DESC 
      LIMIT ? OFFSET ?
    `;
    const posts = await performantDb.query(postsQuery, [ticker, startDateStr, endDateStr, limit, offset]);
    
    const hasMore = (offset + limit) < total;
    
    console.log(`üìù Found ${total} total posts for ${ticker} from database (showing ${posts.length})`);
    
    return {
      posts: posts.map(post => ({
        id: post.id,
        title: post.title,
        excerpt: post.excerpt || extractExcerpt(post.content || post.title, ticker),
        created_date: post.created_date,
        views: post.views || 0,
        category: post.category || 'Ìà¨ÏûêÎ∂ÑÏÑù'
      })),
      total,
      hasMore,
      limit,
      offset
    };
  } catch (error) {
    console.error('Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ Ï°∞Ìöå Ïã§Ìå®:', error);
    return {
      posts: [],
      total: 0,
      hasMore: false,
      limit,
      offset
    };
  }
}

function getTickerSearchTerms(ticker: string): string[] {
  const searchMap: Record<string, string[]> = {
    'TSLA': ['ÌÖåÏä¨Îùº', 'TSLA', 'Tesla'],
    '005930': ['ÏÇºÏÑ±Ï†ÑÏûê', '005930', 'ÏÇºÏÑ±'],
    'INTC': ['Ïù∏ÌÖî', 'INTC', 'Intel'],
    'LLY': ['ÏùºÎùºÏù¥Î¶¥Î¶¨', 'LLY', 'Eli Lilly', 'Î¶¥Î¶¨'],
    'UNH': ['Ïú†ÎÇòÏù¥Ìã∞ÎìúÌó¨Ïä§ÏºÄÏñ¥', 'UNH', 'UnitedHealth', 'Ïú†ÎÇòÏù¥Ìã∞ÎìúÌó¨Ïä§'],
    'NVDA': ['ÏóîÎπÑÎîîÏïÑ', 'NVDA', 'NVIDIA'],
    'AAPL': ['Ïï†Ìîå', 'AAPL', 'Apple', 'ÏïÑÏù¥Ìè∞'],
    'GOOGL': ['Íµ¨Í∏Ä', 'GOOGL', 'Google', 'ÏïåÌååÎ≤≥'],
    'MSFT': ['ÎßàÏù¥ÌÅ¨Î°úÏÜåÌîÑÌä∏', 'MSFT', 'Microsoft', 'ÎßàÏÜå'],
    'AMZN': ['ÏïÑÎßàÏ°¥', 'AMZN', 'Amazon'],
    'META': ['Î©îÌÉÄ', 'META', 'ÌéòÏù¥Ïä§Î∂Å', 'Facebook'],
    '042660': ['ÌïúÌôîÏò§ÏÖò', '042660', 'ÌïúÌôîÏãúÏä§ÌÖú'],
    '267250': ['HDÌòÑÎåÄ', '267250', 'ÌòÑÎåÄÏ§ëÍ≥µÏóÖ'],
    '010620': ['ÌòÑÎåÄÎØ∏Ìè¨Ï°∞ÏÑ†', '010620', 'ÎØ∏Ìè¨Ï°∞ÏÑ†']
  };
  
  return searchMap[ticker] || [ticker];
}

async function findPostsByTickerFromJSON(ticker: string, limit: number, offset: number, period: string = '6mo') {
  try {
    // Í∏∞Í∞Ñ Í≥ÑÏÇ∞ (DB Ìï®ÏàòÏôÄ ÎèôÏùºÌïú Î°úÏßÅ)
    const endDate = new Date();
    const startDate = new Date();
    
    switch (period.toLowerCase()) {
      case '1y':
      case '1year':
        startDate.setFullYear(endDate.getFullYear() - 1);
        break;
      case '6mo':
      case '6m':
        startDate.setMonth(endDate.getMonth() - 6);
        break;
      case '3mo':
      case '3m':
        startDate.setMonth(endDate.getMonth() - 3);
        break;
      case '1mo':
      case '1m':
        startDate.setMonth(endDate.getMonth() - 1);
        break;
      default:
        startDate.setMonth(endDate.getMonth() - 6);
    }
    
    // JSON ÌååÏùºÏóêÏÑú Ìï¥Îãπ Ï¢ÖÎ™©Ïùò recentPosts ÌôïÏù∏
    const dataPath = path.join(process.cwd(), 'data', 'merry-stocks-clean.json');
    
    if (fs.existsSync(dataPath)) {
      const fileContent = fs.readFileSync(dataPath, 'utf8');
      const stockData = JSON.parse(fileContent);
      
      const stock = stockData.find((s: any) => s.ticker === ticker);
      if (stock && stock.recentPosts && stock.recentPosts.length > 0) {
        const allPosts = stock.recentPosts
          .map((post: any) => ({
            id: post.id,
            title: post.title,
            excerpt: post.excerpt || extractExcerpt(post.title, ticker),
            published_date: post.created_date || post.date,
            views: post.views || 0,
            category: post.category || 'Ìà¨ÏûêÎ∂ÑÏÑù'
          }))
          .filter((post: any) => {
            // Í∏∞Í∞Ñ ÌïÑÌÑ∞ÎßÅ Ï†ÅÏö©
            const postDate = new Date(post.published_date);
            return postDate >= startDate && postDate <= endDate;
          });
        
        const total = allPosts.length;
        const posts = allPosts.slice(offset, offset + limit);
        const hasMore = (offset + limit) < total;
        
        console.log(`üìù Found ${total} total posts for ${ticker} from JSON file (showing ${posts.length})`);
        
        return {
          posts,
          total,
          hasMore,
          limit,
          offset
        };
      }
    }

    // JSON ÌååÏùºÏóê Îç∞Ïù¥ÌÑ∞Í∞Ä ÏóÜÏúºÎ©¥ Îπà Í≤∞Í≥º Î∞òÌôò
    console.log(`‚ö†Ô∏è No posts found for ${ticker} in JSON file`);
    return {
      posts: [],
      total: 0,
      hasMore: false,
      limit,
      offset
    };

  } catch (error) {
    console.error('JSON ÌååÏùº Ï°∞Ìöå Ïã§Ìå®:', error);
    return {
      posts: [],
      total: 0,
      hasMore: false,
      limit,
      offset
    };
  }
}

function extractExcerpt(content: string, ticker: string): string {
  if (!content) return '';
  
  // tickerÍ∞Ä Ïñ∏Í∏âÎêú Î∂ÄÎ∂Ñ Ï£ºÎ≥ÄÏùò ÌÖçÏä§Ìä∏Î•º Ï∂îÏ∂ú
  const tickerIndex = content.toLowerCase().indexOf(ticker.toLowerCase());
  if (tickerIndex === -1) {
    return content.slice(0, 150) + '...';
  }
  
  const start = Math.max(0, tickerIndex - 50);
  const end = Math.min(content.length, tickerIndex + 150);
  
  let excerpt = content.slice(start, end);
  if (start > 0) excerpt = '...' + excerpt;
  if (end < content.length) excerpt = excerpt + '...';
  
  return excerpt;
}

// CLAUDE.md ÏõêÏπô: Dummy data Ï†àÎåÄ Í∏àÏßÄ - Ìï¥Îãπ Ìï®Ïàò Ï†úÍ±∞
// Ïã§Ï†ú Îç∞Ïù¥ÌÑ∞Í∞Ä ÏóÜÏúºÎ©¥ Îπà Î∞∞Ïó¥ÏùÑ Î∞òÌôòÌïòÏó¨ "Ï†ïÎ≥¥ ÏóÜÏùå" ÌëúÏãú